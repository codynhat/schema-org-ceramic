/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A video game series.
 */
export type VideoGameSeries = VideoGameSeries1 & VideoGameSeries2;
export type VideoGameSeries1 = CreativeWorkSeries;
/**
 * A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.
 *
 */
export type CreativeWorkSeries = CreativeWork & Series;
/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
export type CreativeWork = Thing;
export type ImageObjectStreamId = string;
export type CreativeWorkStreamId = string;
export type ActionStreamId = string;
export type EventStreamId = string;
/**
 * A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].
 */
export type Series = Intangible;
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export type Intangible = Thing1;
export type PersonStreamId = string;
export type ThingStreamId = string;
export type CreativeWorkSeasonStreamId = string;
export type EpisodeStreamId = string;
export type PlaceStreamId = string;
export type PostalAddressStreamId = string;
export type MusicGroupStreamId = string;
export type QuantitativeValueStreamId = string;
export type GamePlayModeStreamId = string;

/**
 * The most generic type of item.
 */
export interface Thing {
  "@context"?: string;
  "@type"?: string;
  /**
   * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
   */
  additionalType?: string | string[];
  /**
   * An alias for the item.
   */
  alternateName?: string | string[];
  /**
   * A description of the item.
   */
  description?: string | string[];
  /**
   * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
   */
  disambiguatingDescription?: string | string[];
  /**
   * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
   *
   */
  identifier?: string;
  /**
   * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
   */
  image?: string | (string | ImageObjectStreamId)[];
  /**
   * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
   */
  mainEntityOfPage?: string | (string | CreativeWorkStreamId)[];
  /**
   * The name of the item.
   */
  name?: string;
  /**
   * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
   */
  potentialAction?: ActionStreamId | ActionStreamId[];
  /**
   * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
   */
  sameAs?: string | string[];
  /**
   * A CreativeWork or Event about this Thing.
   */
  subjectOf?: (CreativeWorkStreamId | EventStreamId) | (CreativeWorkStreamId | EventStreamId)[];
  /**
   * URL of the item.
   */
  url?: string;
  [k: string]: unknown;
}
/**
 * The most generic type of item.
 */
export interface Thing1 {
  "@context"?: string;
  "@type"?: string;
  /**
   * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
   */
  additionalType?: string | string[];
  /**
   * An alias for the item.
   */
  alternateName?: string | string[];
  /**
   * A description of the item.
   */
  description?: string | string[];
  /**
   * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
   */
  disambiguatingDescription?: string | string[];
  /**
   * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
   *
   */
  identifier?: string;
  /**
   * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
   */
  image?: string | (string | ImageObjectStreamId)[];
  /**
   * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
   */
  mainEntityOfPage?: string | (string | CreativeWorkStreamId)[];
  /**
   * The name of the item.
   */
  name?: string;
  /**
   * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
   */
  potentialAction?: ActionStreamId | ActionStreamId[];
  /**
   * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
   */
  sameAs?: string | string[];
  /**
   * A CreativeWork or Event about this Thing.
   */
  subjectOf?: (CreativeWorkStreamId | EventStreamId) | (CreativeWorkStreamId | EventStreamId)[];
  /**
   * URL of the item.
   */
  url?: string;
  [k: string]: unknown;
}
export interface VideoGameSeries2 {
  /**
   * An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
   */
  actor?: PersonStreamId | PersonStreamId[];
  /**
   * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
   */
  actors?: PersonStreamId | PersonStreamId[];
  /**
   * A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
   */
  characterAttribute?: ThingStreamId | ThingStreamId[];
  /**
   * Cheat codes to the game.
   */
  cheatCode?: CreativeWorkStreamId | CreativeWorkStreamId[];
  /**
   * A season that is part of the media series.
   */
  containsSeason?: CreativeWorkSeasonStreamId | CreativeWorkSeasonStreamId[];
  /**
   * A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
   */
  director?: string;
  /**
   * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
   */
  directors?: PersonStreamId | PersonStreamId[];
  /**
   * An episode of a tv, radio or game media within a series or season.
   */
  episode?: EpisodeStreamId | EpisodeStreamId[];
  /**
   * An episode of a TV/radio series or season.
   */
  episodes?: EpisodeStreamId | EpisodeStreamId[];
  /**
   * An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
   */
  gameItem?: ThingStreamId | ThingStreamId[];
  /**
   * Real or fictional location of the game (or part of game).
   */
  gameLocation?: (string | PlaceStreamId | PostalAddressStreamId) | (string | PlaceStreamId | PostalAddressStreamId)[];
  /**
   * The electronic systems used to play video games.
   */
  gamePlatform?: string;
  /**
   * The composer of the soundtrack.
   */
  musicBy?: MusicGroupStreamId | PersonStreamId;
  /**
   * The number of episodes in this season or series.
   */
  numberOfEpisodes?: number;
  /**
   * Indicate how many people can play this game (minimum, maximum, or range).
   */
  numberOfPlayers?: QuantitativeValueStreamId | QuantitativeValueStreamId[];
  /**
   * The number of seasons in this series.
   */
  numberOfSeasons?: number;
  /**
   * Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
   */
  playMode?: GamePlayModeStreamId | GamePlayModeStreamId[];
  /**
   * The production company or studio responsible for the item e.g. series, video game, episode etc.
   */
  productionCompany?: string;
  /**
   * The task that a player-controlled character, or group of characters may complete in order to gain a reward.
   */
  quest?: string;
  /**
   * A season in a media series.
   */
  season?: string | (string | CreativeWorkSeasonStreamId)[];
  /**
   * A season in a media series.
   */
  seasons?: CreativeWorkSeasonStreamId | CreativeWorkSeasonStreamId[];
  /**
   * The trailer of a movie or tv/radio series, season, episode, etc.
   */
  trailer?: string;
  [k: string]: unknown;
}
