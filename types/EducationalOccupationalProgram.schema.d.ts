/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
 */
export type EducationalOccupationalProgram = EducationalOccupationalProgram1 & EducationalOccupationalProgram2;
export type EducationalOccupationalProgram1 = Intangible;
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export type Intangible = Thing;
export type ImageObjectStreamId = string;
export type CreativeWorkStreamId = string;
export type ActionStreamId = string;
export type EventStreamId = string;
export type EducationalOccupationalCredentialStreamId = string;
export type DefinedTermStreamId = string;
export type CourseStreamId = string;
export type StructuredValueStreamId = string;
export type CategoryCodeStreamId = string;
export type DemandStreamId = string;
export type OfferStreamId = string;
export type AlignmentObjectStreamId = string;
export type OrganizationStreamId = string;
export type PersonStreamId = string;

/**
 * The most generic type of item.
 */
export interface Thing {
  "@context"?: string;
  "@type"?: string;
  /**
   * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
   */
  additionalType?: string | string[];
  /**
   * An alias for the item.
   */
  alternateName?: string | string[];
  /**
   * A description of the item.
   */
  description?: string | string[];
  /**
   * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
   */
  disambiguatingDescription?: string | string[];
  /**
   * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
   *
   */
  identifier?: string;
  /**
   * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
   */
  image?: string | (string | ImageObjectStreamId)[];
  /**
   * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
   */
  mainEntityOfPage?: string | (string | CreativeWorkStreamId)[];
  /**
   * The name of the item.
   */
  name?: string;
  /**
   * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
   */
  potentialAction?: ActionStreamId | ActionStreamId[];
  /**
   * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
   */
  sameAs?: string | string[];
  /**
   * A CreativeWork or Event about this Thing.
   */
  subjectOf?: (CreativeWorkStreamId | EventStreamId) | (CreativeWorkStreamId | EventStreamId)[];
  /**
   * URL of the item.
   */
  url?: string;
  [k: string]: unknown;
}
export interface EducationalOccupationalProgram2 {
  /**
   * The date at which the program stops collecting applications for the next enrollment cycle.
   */
  applicationDeadline?: string;
  /**
   * The date at which the program begins collecting applications for the next enrollment cycle.
   */
  applicationStartDate?: string;
  /**
   * The day of the week for which these opening hours are valid.
   */
  dayOfWeek?: string;
  /**
   * A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
   */
  educationalCredentialAwarded?: string | (string | string | EducationalOccupationalCredentialStreamId)[];
  /**
   * Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
   */
  educationalProgramMode?: string | (string | string)[];
  /**
   * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
   */
  endDate?: string;
  /**
   * A financial aid type or program which students may use to pay for tuition or fees associated with the program.
   */
  financialAidEligible?: string | (string | DefinedTermStreamId)[];
  /**
   * A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
   */
  hasCourse?: CourseStreamId | CourseStreamId[];
  /**
   * The maximum number of students who may be enrolled in the program.
   */
  maximumEnrollment?: number;
  /**
   * The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
   */
  numberOfCredits?: number | StructuredValueStreamId;
  /**
   * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
   * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
   */
  occupationalCategory?: string | (string | CategoryCodeStreamId)[];
  /**
   * A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
   */
  occupationalCredentialAwarded?: string | (string | string | EducationalOccupationalCredentialStreamId)[];
  /**
   * An offer to provide this itemâ€”for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
   *
   */
  offers?: (DemandStreamId | OfferStreamId) | (DemandStreamId | OfferStreamId)[];
  /**
   * Prerequisites for enrolling in the program.
   */
  programPrerequisites?:
    | (string | AlignmentObjectStreamId | CourseStreamId | EducationalOccupationalCredentialStreamId)
    | (string | AlignmentObjectStreamId | CourseStreamId | EducationalOccupationalCredentialStreamId)[];
  /**
   * The type of educational or occupational program. For example, classroom, internship, alternance, etc..
   */
  programType?: string;
  /**
   * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
   */
  provider?: OrganizationStreamId | PersonStreamId;
  /**
   * The expected salary upon completing the training.
   */
  salaryUponCompletion?: string;
  /**
   * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
   */
  startDate?: string;
  /**
   * The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
   */
  termDuration?: string;
  /**
   * The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
   */
  termsPerYear?: number;
  /**
   * The time of day the program normally runs. For example, "evenings".
   */
  timeOfDay?: string;
  /**
   * The expected length of time to complete the program if attending full-time.
   */
  timeToComplete?: string;
  /**
   * The estimated salary earned while in the program.
   */
  trainingSalary?: string;
  /**
   * The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
   */
  typicalCreditsPerTerm?: number | StructuredValueStreamId;
  [k: string]: unknown;
}
